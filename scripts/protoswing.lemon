global u8 IsProtoSwing
global u8 IsProtoSwingTails
global u8 IsProtoSwingKnuckles

// character.lemon
//# address-hook(0x0143ba) end(0x014520)
function void Tails.UpdateCarrySonic()
{
	// In all known cases, A1 and A2 are the same here:
	//  A1 = 0xffffb000  -> Player 1 object address
	//  A2 = 0xfffff73e  -> Address of "tails.carrying"

	if (u8[A2] == 0)
	{
		// Not carrying: Check if close enough to grab player 1
		Tails.CheckCatchSonic()
		return
	}

	if (u8[A1 + 0x05] < 0x04)
	{
		if ((objA1.flags2a & char.flag.IN_AIR) && (objA1.velocity.x == tails.carried_velocity_x))
		{
			if (tails.carried_velocity_y != objA1.velocity.y)
			{
				u8[A1 + 0x40] = 0
				u8[A1 + 0x2e] = 0
				u8[A2] = 0
				u8[A2+1] = 60
				return
			}

			if (s8[A1 + 0x2e] < 0)
			{
				u8[A2] = 0
				u8[A2+1] = 60
				return
			}

			bool jumpOff = (D0.u8 & CONTROL_ABC) != 0
			u16 catchTimeout = 60
		#if STANDALONE
			if (jumpOff && Game.getSetting(SETTING_TAILS_ASSIST_MODE) >= 2)		// Hybrid & Mania style only
			{
				// Don't jump off unless Down is pressed as well
				jumpOff = ((D0.u16 >> 8) & CONTROL_DOWN) != 0

				// No catch timeout in Mania style, but holding Down will prevent the catch
				if (Game.getSetting(SETTING_TAILS_ASSIST_MODE) == 3)
					catchTimeout = 0
			}
		#endif
			if (!jumpOff)
			{
				objA1.position.x.u16 = char.position.x.u16
				objA1.position.y.u16 = char.position.y.u16 + (global.inv_gravity ? -0x1c : 0x1c)

				objA1.render_flags &= ~(render_flag.FLIP_X | render_flag.FLIP_Y)
				objA1.flags2a &= ~char.flag.FACING_LEFT
				D0.u8 = char.flags & char.flag.FACING_LEFT
				objA1.render_flags |= D0.u8
				objA1.flags2a |= D0.u8
				if (global.inv_gravity)
					objA1.render_flags ^= render_flag.FLIP_Y

				--u8[A1 + 0x24]
				if (s8[A1 + 0x24] < 0)
				{
					u8[A1 + 0x24] = 0x0b
					D1 = u8[A1 + 0x23]
					D0.u8 = u8[0x014522 + D1.u16]
					if (D0.u8 == 0xff)
					{
						u8[A1 + 0x23] = 0
						D0.u8 = u8[0x014522]
					}
					else
					{
						++u8[A1 + 0x23]
					}

					objA1.animation.sprite = D0.u8
					D0 = objA1.animation.sprite

					u32 backupA2 = A2
					SetCharacterSpritePatternsSwing()
					A2 = backupA2
				}
				else
				{
					// this is to fix a dumb issue where the code will unset the proto swing value
					if (u32[A1] == 0x010a94)
						IsProtoSwing = 1
					else if	(u32[A1] == 0x01365c)
						IsProtoSwingTails = 1
					else if (u32[A1] == 0x016444)
						IsProtoSwingKnuckles = 1				
				}

				s16[0xffffb000 + 0x18] = char.velocity.x
				s16[0xffffb000 + 0x1a] = char.velocity.y
				tails.carried_velocity_x = char.velocity.x
				tails.carried_velocity_y = char.velocity.y

				pushAll()
				A0 = 0xffffb000
				Character.CheckCollision()
				popAll()
			}
			else
			{
				// Jumping off
				u8[A1 + 0x2e] = 0
				u8[A2] = 0

				if (D0.u16 & 0x0f00)	// Any direction held?
				{
					u8[A2+1] = catchTimeout

					if (D0 & 0x0400)	// CONTROL_LEFT held
						objA1.velocity.x = -0x200
					if (D0 & 0x0800)	// CONTROL_RIGHT held
						objA1.velocity.x = 0x200
				}
				else
				{
					u8[A2+1] = 18
				}

				objA1.velocity.y = -0x380		// TODO: Should Knuckles have a different jump acceleration here?
				objA1.hitbox_extends.y = char.hitbox.y.ROLLING
				objA1.hitbox_extends.x = char.hitbox.x.ROLLING
				objA1.state = char.state.ROLLING
				objA1.flags2a |= (char.flag.IN_AIR | char.flag.ROLLING)
				objA1.flags2a &= ~char.flag.CONTROL_LOCK
				u8[A1 + 0x40] = 0x01

			#if STANDALONE
				playSound(SFX_JUMP)
			#endif
			}
			return
		}

		objA1.velocity.y = -0x100
		u8[A1 + 0x40] = 0
	}

	u8[A1 + 0x2e] = 0
	u8[A2] = 0
	u8[A2+1] = 60
}




// aiz_zipline.lemon
//# address-hook(0x022224)
function void fn022224()
{
	D1.u8 = u8[A1 + 0x2a] & char.flag.FACING_LEFT
	objA1.render_flags &= ~(render_flag.FLIP_X | render_flag.FLIP_Y)
	objA1.render_flags |= D1.u8

	D0 = objA1.animation.sprite
	u32 backupA2 = A2
	SetCharacterSpritePatternsSwing()
	A2 = backupA2
}



// duplicate of the regular code but with a swing check
function void SetCharacterSpritePatternsSwing()
{
	if (u32[A1] == 0x010a94)
		IsProtoSwing = 1
	else if	(u32[A1] == 0x01365c)
		IsProtoSwingTails = 1
	else if (u32[A1] == 0x016444)
		IsProtoSwingKnuckles = 1
	
	updateCharacterSpritePatterns(u8[A1 + 0x38], D0.u8)
}


function u64 Standalone.getModdedAnimationSpriteKey(u8 character, u16 animationSpriteEx)
{
	// not really efficient but it works i guess
	u64 key = 0
	if (animationSpriteEx > 0xE3 && animationSpriteEx < 0xE9)
	{
		if (IsProtoSwing == 1 && character == CHARACTER_SONIC)
		{
			
			key = stringformat("character_sonic_protohang_%d", animationSpriteEx - 0xE3)
			return key
		}
		else if (IsProtoSwingTails == 1 && character == CHARACTER_TAILS)
		{
			key = stringformat("character_tails_protohang_%d", animationSpriteEx - 0xE3)
			return key
		}
		else if (IsProtoSwingKnuckles == 1 && character == CHARACTER_KNUCKLES)
		{
			key = stringformat("character_knuckles_protohang_%d", animationSpriteEx - 0xE3)
			return key
		}
	}
	else
	{
		IsProtoSwingTails = 0
		IsProtoSwing = 0
		IsProtoSwingKnuckles = 0
	}
	return base.Standalone.getModdedAnimationSpriteKey(character, animationSpriteEx)
}
