global bool sonic.sprites
globbal bool knux.sprites

//# address-hook(0x0221ec) end(0x022246)
function void fn0221ec()
{
    if (u16[A0 + 0x30] != 0)
    {
        fn022258()
        return
    }

    fn02219e()
    objA1.position.x.u16 = objA0.position.x.u16
    objA1.position.y.u16 = objA0.position.y.u16 + 0x14

    A3 = 0xffff0000 + u16[A0 + 0x3c]
    D0 = u8[A3 + 0x26]
    if (u8[A1 + 0x2a] & char.flag.FACING_LEFT)
        D0.s8 = -D0.s8

	objA1.state = char.state.RUNNING
    D0.u16 = u8(D0.u8 + 8) >> 4
    u8[A1 + 0x22] = u8[0x022248 + D0.u16]
    fn022224()
}

//# address-hook(0x012600) end(0x01286c)
//# translated(0x012a2a) end(0x012a6e)
function void UpdateSonicAnimation()
{
	if (char.state != char.state.former)
	{
		char.state.former = char.state
		char.animation.frame = 0
		char.animation.timer = 0
		char.flags &= ~char.flag.PUSHING
	}

	A1 = (super.active) ? 0x012C84 : 0x012aa6
	A1 = tableLookupAddress(A1, char.state * 2)
	D0.u8 = u8[A1]

	// D0.u8 is either:
	//  - 0xff when running
	//  - 0xfe when rolling (on ground or in air)
	//  - between 0x00 and 0x7f in other cases (like standing, balancing, spring-jumping, getting hurt, etc.)

	if (D0.u8 < 0x80)
	{
		updateSonicAnimationStanding()
	}
	else if (D0.u8 == 0xff)
	{
		updateSonicAnimationRunning()
	}
	else
	{
		updateSonicAnimationRolling()
	}
}

function void updateSonicAnimation_shared()
{
#if STANDALONE
	if (ROMDataAnalyser.isEnabled())
	{
		if (!ROMDataAnalyser.hasEntry("SonicAnimation", A1))
		{
			u8 result = u8[A1 + char.animation.frame + 1]
			ROMDataAnalyser.beginEntry("SonicAnimation", A1)
			ROMDataAnalyser.addKeyValue(stringformat("0x%02x", char.animation.frame), stringformat("0x%02x", result))
			ROMDataAnalyser.endEntry()
		}
	}
#endif

	D0.u8 = u8[A1 + char.animation.frame + 1]
	if (D0.u8 < 0xfc)
	{
		char.animation.sprite = D0.u8
		++char.animation.frame
	}
	else if (D0.u8 == 0xfd)
	{
		char.state = u8[A1 + char.animation.frame + 2]
	}
	else if (D0.u8 == 0xfe)
	{
		u8 diff = u8[A1 + char.animation.frame + 2]
		char.animation.frame -= diff
		char.animation.sprite = u8[A1 + char.animation.frame + 1]
		++char.animation.frame
	}
	else if (D0.u8 == 0xff)
	{
		char.animation.frame = 1
		char.animation.sprite = u8[A1 + 1]
	}
	// Note: (D0.u8 == 0xfc) is an unhandled case
}


function void updateSonicAnimationRunning()
{
	D0 = 0
	if ((u8[A0 + 0x2d] & 0x80) || char.rotation.x != 0)
	{
		updateCharacterAnimationRunning_shared()
	}
	else
	{
		D0.u8 = (s8(char.rotation) > 0) ? (char.rotation - 1) : char.rotation
		D2.u8 = char.flags & char.flag.FACING_LEFT
		if (D2.u8 == 0)
			D0.s8 = -D0.s8 - 1

		D0.u8 += 0x10
		D1 = (D0.u8 & 0x80) ? (render_flag.FLIP_X | render_flag.FLIP_Y) : 0
		D2.u8 ^= D1.u8

		char.render_flags &= 0xfc
		char.render_flags |= D2.u8

		if (char.flags & char.flag.PUSHING)
		{
			updateSonicAnimationPushing()
			return
		}

		D0.u8 = (D0.u8 >> 4) & 0x06
		D2.u16 = abs(char.groundspeed)
		if (char.bonus_effect & char.bonus.INFINITE_INERTIA)
			D2.u16 *= 2

		if (char.character == CHARACTER_SONIC)
		{
			if (super.active == 0)
			{
				if (D2.u16 < 0x600)
				{
					A1 = 0x012aee
					D3.u8 = D0.u8 * 4
				}
				else
				{
					A1 = 0x012af8
					D3.u8 = D0.u8 * 2
				}
			}
			else
			{
				if (D2.u16 < 0x800)
				{
					A1 = 0x012CCC
					D3.u8 = D0.u8 * 4
				}
				else
				{
					A1 = 0x012CD6
					D3.u8 = D0.u8 * 2
				}
			}
		}
		else if (char.character == CHARACTER_TAILS)
		{
			if (D2.u16 < 0x600)
			{
				A1 = 0x015b04
				D3.u8 = D0.u8 * 4
			}
			else if (D2.u16 < 0x700)
			{
				A1 = 0x015b0e
				D3.u8 = D0.u8 * 2
			}
			else
			{
				A1 = 0x015bfd
				D3.u8 = D0.u8
			}
		}
		else if (char.character == CHARACTER_KNUCKLES)
		{
			if (D2.u16 < 0x600)
			{
				A1 = 0x017f3e
				D3.u8 = D0.u8 * 4
			}
			else
			{
				A1 = 0x017f48
				D3.u8 = D0.u8 * 2
			}
		}

		D0.u8 = u8[A1 + char.animation.frame + 1]
	#if STANDALONE
		if (D0.u8 >= 0xfe)		// 0xfe is possible in rare cases when Sonic touches ground while being carried by Tails
	#else
		if (D0.u8 == 0xff)
	#endif
		{
			char.animation.frame = 0
			D0.u8 = u8[A1 + 1]
		}

		char.animation.sprite = D0.u8 + D3.u8
		--char.animation.timer
		if (s8(char.animation.timer) < 0)
		{
			char.animation.timer = max(0x800 - D2.s16, 0) >> 8
			++char.animation.frame
		}
	}
}

//# address-hook(0x012a72) end(0x012aa2)
function void updateSonicAnimationPushing()
{
	--char.animation.timer
	if (s8(char.animation.timer) < 0)
	{
		D2.s16 = 0x800 - abs(char.groundspeed)
		D2.s16 = max(D2.s16, 0) >> 6
		char.animation.timer = D2.u8

		if (char.character == CHARACTER_SONIC)
		{
			A1 = (super.active) ? 0x012CE0 : 0x012b16
		}
		else if (char.character == CHARACTER_TAILS)
		{
			A1 = 0x015b22
		}
		else if (char.character == CHARACTER_KNUCKLES)
		{
			char.animation.timer >>= 2		// Faster animation for Knuckles
			A1 = 0x017f66
		}

		updateSonicAnimation_shared()
	}
}







function void ROMManipulation.RepairAnimations()
{
	// Fix for Tails' rolling animation playing backwards
	u32[0x015b18] = 0x01989796
	u32[0x015b1d] = 0x00989796
}














function void checkForBalancing()
{
	if char.character != CHARACTER_SONIC || super.active
	{
		base.checkForBalancing()
	}
	s8 balancing = 0

	if (char.flags & char.flag.ON_OBJECT)
	{
		// Standing on an object, get its address in RAM
		A1 = 0xffff0000 + char.object_standing_on

		// Some kind of "no balancing here" flag?
		//  -> I could not find any use-case for it, but using it in AIR for the mgz_spinwheeltrigger
		if ((u8[A1 + 0x2a] & 0x80) == 0)
		{
			if (char.character == CHARACTER_SONIC)
			{
				D1.u16 = objA1.box_size.x + char.position.x.u16 - objA1.position.x.u16
				D2.u16 = objA1.box_size.x * 2 - 2

				if (D1.s16 < 2)
				{
					if ((u8[A0 + 0x2a] & 0x01) == 0)
					{
						balancing = 3
						if (D1.s16 < -4 && !super.active)
							balancing = -4
					}
					else
					{
						u8[A0 + 0x2a] |= 0x01
						balancing = -1
						if (D1.s16 < -4 && !super.active)
							balancing = -2

					}
				}
				else if (D1.s16 >= D2.s16)
				{
					if ((u8[A0 + 0x2a] & 0x01) == 0)
					{
						balancing = 1
						if (D1.s16 >= D2.s16 + 6 && !super.active)
							balancing = 2
					}
					else
					{
						u8[A0 + 0x2a] &= ~0x01
						balancing = -3
						if (D1.s16 >= D2.s16 + 6 && !super.active)
							balancing = 4

					}
				}
			}
			else if (char.character == CHARACTER_TAILS)
			{
				D1.u16 = objA1.box_size.x + char.position.x.u16 - objA1.position.x.u16
				D2.u16 = objA1.box_size.x * 2 - 4

				if (D1.s16 < 4)
				{
					balancing = -1
				}
				else if (D1.s16 >= D2.s16)
				{
					balancing = 1
				}
			}
			else if (char.character == CHARACTER_KNUCKLES)
			{
				D1.u16 = objA1.box_size.x + char.position.x.u16 - objA1.position.x.u16
				D2.u16 = objA1.box_size.x * 2 - 2

				if (D1.s16 < 2)
				{
					balancing = -1
				}
				else if (D1.s16 >= D2.s16)
				{
					balancing = 1
				}
			}
		}
	}
	else
	{
		// Not on an object
		D3.u16 = char.position.x.u16
		fn012006()

		if (D1.s16 >= 0x0c)
		{
			if (char.angle_sensor_1 == 0x03) && char.character == CHARACTER_SONIC && !super.active
			{
				if ((u8[A0 + 0x2a] & 0x01) == 0)
				{
					balancing = 1
					if (char.character == CHARACTER_SONIC && !super.active)
					{
						D3.u16 = char.position.x.u16 - 6
						fn012006()
						if (D1.s16 >= 0x0c)
							balancing = 2
					}
				}
				else
				{
					balancing = -3
					if (char.character == CHARACTER_SONIC && !super.active)
					{
						D3.u16 = char.position.x.u16 - 6
						fn012006()
						if (D1.s16 >= 0x0c)
							balancing = 4
					}
				}
			}
			else if (char.angle_sensor_2 == 0x03) && char.character == CHARACTER_SONIC && !super.active
			{
				if ((u8[A0 + 0x2a] & 0x01) == 0)
				{
					balancing = 3
					if (char.character == CHARACTER_SONIC && !super.active)
					{
						D3.u16 = char.position.x.u16 + 6
						fn012006()
						if (D1.s16 >= 0x0c)
							balancing = -4
					}
				}
				else
				{
					balancing = -1
					if (char.character == CHARACTER_SONIC && !super.active)
					{
						D3.u16 = char.position.x.u16 + 6
						fn012006()
						if (D1.s16 >= 0x0c)
							balancing = -2
					}
				}
			}
		}
	}

	if (balancing != 0)
	{
		// Set balancing state 1 or 2 (only Sonic actually uses balancing state 2)
		if (char.character == CHARACTER_SONIC && !super.active)
		{
			char.state = (abs(balancing) < 2) ? char.state.BALANCING1 : (abs(balancing) < 3) ? char.state.BALANCING2 : (abs(balancing) < 4) ? 0x1D : 0x1E
		}
		else
		{
			char.state = (abs(balancing) < 2) ? char.state.BALANCING1 : char.state.BALANCING2
		}

		// Face left or right, depending on where we are balancing
		bool wasFacingLeft = (char.flags & char.flag.FACING_LEFT)
		bool nowFacingLeft = (balancing < 0)

		if (nowFacingLeft)
			char.flags |= char.flag.FACING_LEFT
		else
			char.flags &= ~char.flag.FACING_LEFT

		if (char.character == CHARACTER_KNUCKLES)
		{
			if (wasFacingLeft != nowFacingLeft)
			{
				char.state.former = char.state.BALANCING1
				char.animation.frame = 4
				char.animation.timer = 0
			}
		}
	}
}


//# address-hook(0x03967c) end(0x03968c)
function void fn03967c()
{
	D4.u16 = 0x6400
	D6 = 0x347850
	A2 = 0x348128
	fn03969e()
}

//# address-hook(0x0396e4) end(0x03977a)
function void fn0396e4()
{
	A1 = 0xffffb000
	objA1.velocity.x = 0x0800
	objA1.velocity.y = 0x0280
	u16[A1 + 0x1c] = 0x0800
	u8[A1 + 0x1e] = 0x0e
	u8[A1 + 0x1f] = 0x07
	objA1.state = char.state.ROLLING
	u8[A1 + 0x22] = 0
	objA1.flags2a |= (char.flag.IN_AIR | char.flag.ROLLING)
	u8[A1 + 0x2e] = 0x03
	u8[A1 + 0x40] = 0

	player1.control_override = 1
	control.player1 = 0
	control.pad1 = 0

	objA0.animation.timer = 0x1e
	objA0.mapping_offset = 0x300000
	objA0.sprite_attributes = 0x0320
	objA0.sprite_priority = 0x80
	objA0.box_size.x = 0x20
	objA0.box_size.y = 0x20
	objA0.render_flags = render_flag.WORLD
	objA0.animation.sprite = 0x08
	objA0.position.x.u16 = 0xc0
	objA0.position.y.u16 = 0x0170

	objA0.update_address = 0x039780
	fn039780()
}




// continue stuff by hazelspooder! howdy!

// sonic in continue screen
//# address-hook(0x05c5ac) end(0x05c5ce)
function void fn05c5ac()
{
	// Sonic running after Knuckles when continuing

	objA0.base_state += 2
	objA0.mapping_offset = 0x146620
	objA0.sprite_attributes = (Char.Player1.targetInVRAM >> 5)
	char.animation.sprite.backup = 0
	objA0.animation.sprite = 0xc5
	objA0.animation.timer = 0x06
}

//# address-hook(0x05c5d0) end(0x05c620)
function void fn05c5d0()
{
	// Sonic getting up
	--objA0.animation.timer
	if (s8(objA0.animation.timer) >= 0)
		return

	objA0.animation.timer = 0x06
	D0 = objA0.animation.sprite
	if (D0.u8 == 0xba)
	{
		playSound(SFX_SPINDASH_CHARGE)
		objA0.base_state = 0x04
		objA0.state.both = 0x01
		objA0.groundspeed = 0
		objA0.countdown_value = 0x24
	}
	else
	{
		objA0.animation.sprite = 0xba
	}
}

//# address-hook(0x05c62c) end(0x05c640)
function void fn05c62c()
{
	// Sonic starts running

	UpdateSonicAnimation()
	
	if (objA0.groundspeed < 0x0600)
		objA0.groundspeed += 0x0040
	else
		objA0.groundspeed = 0x0600
	
	--objA0.countdown_value
	if (objA0.countdown_value < 0)
	{
		objA0.base_state = 0x06
	}
}



//# address-hook(0x05c684) end(0x05c6b0)
function void fn05c684()
{
	// make object use sonic & tails version instead
	
	objA0.value42 = 1 // indicate this is sonic alone variant
	
	objA0.mapping_offset = 0x05cc4a
	objA0.sprite_attributes = (ContinueScreen.Characters.targetInVRAM >> 5)
	objA0.sprite_priority = 0x0280
	objA0.box_size.x = 0x0c
	objA0.box_size.y = 0x14
	objA0.position.x.u16 = 0x0120 + getScreenExtend()
	objA0.position.y.u16 = 0x0120

	objA0.update_address = 0x05c55c
	fn05c55c()
}

// this is actually an empty function by default
//# address-hook(0x05c65e) end(0x05c65e)
function void fn05c65e()
{
	if (objA0.value42 == 1) // check for if playing as sonic alone
		u8[0xfffffaa9] = 1
}




//# address-hook(0x05c7b2) end(0x05c7e0)
function void fn05c7b2()
{
	// Tails running after Knuckles when continuing

	objA0.base_state += 2
	objA0.mapping_offset = 0x148eb8
	objA0.sprite_attributes = (Char.Tails.targetInVRAM >> 5)
	objA0.sprite_priority = 0x0280
	char.animation.sprite.backup.tails = 0
	objA0.state.both = 0x0500	// char.state.STANDING, char.state.RUNNING
	u16[A0 + 0x22] = 0xad00		// objA0.animation.sprite = 0xad, objA0.animation.frame = 0x00
	objA0.countdown_value = 0x17
}

// tails in continue
//# address-hook(0x05c7e2) end(0x05c7fc)
function void fn05c7e2()
{
	--objA0.countdown_value
	if (objA0.countdown_value >= 0)
		return

	objA0.base_state = 0x04
	objA0.state = 0
	objA0.groundspeed = 0
	objA0.countdown_value = 0x23
	fn05c802()
}

//# address-hook(0x05c802) end(0x05c80e)
function void fn05c802()
{
	if (objA0.groundspeed < 0x0600)
		objA0.groundspeed += 0x0040
	else
		objA0.groundspeed = 0x0600

	--objA0.countdown_value
	if (objA0.countdown_value < 0)
	{
		objA0.base_state = 0x06
	}
	UpdateTailsAnimation()
}


// knuckles on the continue screen
// Knuckles

//# address-hook(0x05c838) end(0x05c886)
function void fn05c838()
{
	base.fn05c838()
	
	if (isMainCharacter(CHARACTER_KNUCKLES))
	{
		objA0.value42 = 1 // playing as knuckles
	}
}


//# address-hook(0x05c8ea) end(0x05c91c)
function void fn05c8ea()
{
	if (objA0.value42 != 1) // do not use modified code here if not playing as knux
	{
		base.fn05c8ea()
		return
	}

	// Knuckles running

	objA0.base_state += 2
	objA0.mapping_offset = 0x14a8d6
	objA0.sprite_attributes = (sprite_attribute.PALETTE.LINE3 | (ContinueScreen.Knuckles.targetInVRAM >> 5))
	objA0.sprite_priority = 0x80
	objA0.box_size.x = 0x20
	objA0.box_size.y = 0x30
	objA0.animation.timer = 0
	objA0.animation.frame = 0
	
	objA0.groundspeed = 0
	objA0.animation.sprite = 0x9b
	objA0.countdown_value = 0x24
	playSound(SFX_SPINDASH_CHARGE)
}

//# address-hook(0x05c91e) end(0x05c92c)
function void fn05c91e()
{
	if (objA0.value42 != 1) // do not use modified code here if not playing as knux
	{
		base.fn05c91e()
		return
	}
	
	
	if (objA0.groundspeed < 0x0600)
		objA0.groundspeed += 0x0040
	else
		objA0.groundspeed = 0x0600

	--objA0.countdown_value
	if (objA0.countdown_value < 0)
	{
		objA0.base_state = 0x04
		fn05c932()
	}
	UpdateKnucklesAnimation()

}

include protoswing